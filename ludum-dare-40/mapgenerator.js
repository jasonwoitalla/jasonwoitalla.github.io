var taken = [[0,0],[0,1]];
var chunks = [];
var Chunk = enchant.Class.create({
	initialize: function(x, y, top, bottom){
		this.x = x
		this.y = y
		this.blob = false;
		this.full = top.concat(bottom);;
	}
});

function generateChunk(x, y, ent, side){
	taken.push([x,y]);
	//Generate Our Four Option
	var op1 = arrayClone(getMap(Math.floor(Math.random()*5)+1));
	var op2 = arrayClone(getMap(Math.floor(Math.random()*5)+1));
	var op3 = arrayClone(getMap(Math.floor(Math.random()*5)+1));
	var op4 = arrayClone(getMap(Math.floor(Math.random()*5)+1));

	//Set Doors in the data
	op1 = setOne(op1);
	op2 = setTwo(op2);
	op3 = setThree(op3);
	op4 = setFour(op4);
	//Set Enterance Door
	if(ent === 1){
		op1 = setDoor(op1, side, 3);
	}else if(ent === 2){
		op2 = setDoor(op2, side, 3);
	}else if(ent === 3){
		op3 = setDoor(op3, side, 3);
	}else if(ent === 4){
		op4 = setDoor(op4, side, 3);
	}

	//Choose Exit Door
	var exitLoc = getExitLocation([x,y]);//Picks direction of the next loaded chunk
	var randRoom = Math.floor(Math.random()*2)+1;//Picks a random exit rooom
	if(exitLoc == 1){
		if(randRoom == 1)
			op1 = setDoor(op1, 1, 2);
		else
			op3 = setDoor(op3, 1, 2);
	}else if(exitLoc == 2){
		if(randRoom == 1)
			op1 = setDoor(op1, 2, 2);
		else
			op2 = setDoor(op2, 2, 2);
	}else if(exitLoc == 3){
		if(randRoom == 1)
			op2 = setDoor(op2, 3, 2);
		else
			op4 = setDoor(op4, 3, 2);
	}else if(exitLoc == 4){
		if(randRoom == 1)
			op3 = setDoor(op3, 4, 2);
		else
			op4 = setDoor(op4, 4, 2);
	}

	//Merge Options
	var top = mergeOptions(op1, op2);
	var bottom = mergeOptions(op3, op4);
	//Save Chunk
	var temp = new Chunk(x, y, top, bottom);

	//Blob Creation
	var blobLoc = getRandomSpace(temp);
	temp.full[blobLoc[0]][blobLoc[1]] = 4;

	return temp;
}

function mergeOptions(op1, op2){
	var temp = [];
	if(op1){
		for(var y = 0; y < op1.length; y++){
			temp[y] = op1[y].concat(op2[y]);
		}
	}
	return temp;
}

function setOne(op){
	op = setDoor(op, 3, 0);
	op = setDoor(op, 4, 0);

	return op;
}

function setTwo(op){
	op = setDoor(op, 1, 0);
	op = setDoor(op, 4, 0);

	return op;
}

function setThree(op){
	op = setDoor(op, 2, 0);
	op = setDoor(op, 3, 0);

	return op;
}

function setFour(op){
	op = setDoor(op, 2, 0);
	op = setDoor(op, 1, 0);

	return op;
}

function setDoor(op, side, val){
	switch(side){
		case 1:
			op[6][0] = val;//Left Door
			op[7][0] = val;
		break;
		case 2:
			op[0][9] = val;//Top Door
			op[0][10] = val;
			op[0][11] = val;
		break;
		case 3:
			op[6][19] = val;//Right Door
			op[7][19] = val;
		break;
		case 4:
			op[14][9] = val;//Bottom Door
			op[14][10] = val;
			op[14][11] = val;
		break;
	}
	return op;
}

function getMap(op){
	switch(op){
		case 1:
			return option1;
		break;
		case 2:
			return option2;
		break;
		case 3:
			return option3;
		break;
		case 4:
			return option4;
		break;
		case 5:
			return option5;
		break;
	}
}

function getExitLocation(coords){
	var exitLoc = Math.floor(Math.random()*4)+1;
	var avail = true;
	for(var i = 0; i < taken.length; i++){
		if(exitLoc == 1 && coords[0]-1 == taken[i][0] && coords[1] == taken[i][1]){//Left
			avail = false;
		}else if(exitLoc == 2 && coords[1]-1 == taken[i][1] && coords[0] == taken[i][0]){//Up
			avail = false;
		}else if(exitLoc == 3 && coords[0]+1 == taken[i][0] && coords[1] == taken[i][1]){//Right
			avail = false;
		}else if(exitLoc == 4 && coords[1]+1 == taken[i][1] && coords[0] == taken[i][0]){//Down
			avail = false;
		}		
	}
	if(avail){
		console.log("Exit Location: " + exitLoc + " of " + coords);
		return exitLoc;//Valid Exit Location
	}
	else
		return getExitLocation(coords);//Recusive check
}

//Map Data
const startRoom = [
[8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[13,14,14,14,14,14,14,14,14,2,2,2,14,14,14,14,14,14,14,15]
];

const startCollision = [
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1]
];

var colRoom = [
[8,9,9,9,9,9,9,9,9,2,2,2,9,9,9,9,9,9,9,10],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15]
];

const option1 = [
[8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],//option[1]
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],//option[2]
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],//option[3]
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],//option[4]
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15]
];

const option2 = [
[8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,1,14,1,0,0,0,0,0,0,1,14,1,0,0,0,12],
[11,0,0,0,12,1,11,0,0,0,0,0,0,12,1,11,0,0,0,12],
[11,0,0,0,12,1,11,0,0,0,0,0,0,12,1,11,0,0,0,12],
[11,0,0,0,12,1,11,0,0,0,0,0,0,12,1,11,0,0,0,12],
[11,0,0,0,12,1,11,0,0,0,0,0,0,12,1,11,0,0,0,12],
[11,0,0,0,12,1,11,0,0,0,0,0,0,12,1,11,0,0,0,12],
[11,0,0,0,1,9,1,0,0,0,0,0,0,1,9,1,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15]
];

const option3 = [
[8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,1,14,14,14,14,14,14,14,14,14,14,14,0,0,0,12],
[11,0,0,0,12,1,1,1,1,1,1,1,1,1,1,11,0,0,0,12],
[11,0,0,0,1,9,9,9,9,9,9,9,9,9,9,1,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,1,14,14,14,14,14,14,14,14,14,14,1,0,0,0,12],
[11,0,0,0,12,1,1,1,1,1,1,1,1,1,1,11,0,0,0,12],
[11,0,0,0,1,9,9,9,9,9,9,9,9,9,9,1,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15]
];

const option4 = [
[8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,15,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15]
];

const option5 =[
[8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,1,14,14,14,14,1,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,12,1,1,1,1,11,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,12,1,1,1,1,11,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,12,1,1,1,1,11,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,12,1,1,1,1,11,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,1,9,9,9,9,1,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
[13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15]
];